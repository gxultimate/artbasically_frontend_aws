{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alqui\\\\Desktop\\\\Art Basically AWS\\\\artfrontend\\\\src\\\\printingpartner\\\\sections\\\\CPendingOrders.js\";\nimport React, { Component } from 'react';\nimport { MDBCard, MDBCardBody, MDBTable, MDBTableBody, MDBTableHead, MDBRow, MDBCol } from 'mdbreact';\nimport { inject, observer } from 'mobx-react';\nimport ViewData from '../sections/ViewData';\n\nclass PendingOrders extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      img: []\n    };\n  }\n\n  componentDidMount() {\n    let {\n      startingStore: {\n        getOrders,\n        getAccounts\n      }\n    } = this.props; // getCategories();\n\n    getAccounts();\n    getOrders();\n  }\n\n  arrayBufferToBase64(buffer) {\n    var binary = '';\n    var bytes = [].slice.call(new Uint8Array(buffer));\n    bytes.forEach(b => binary += String.fromCharCode(b));\n    return window.btoa(binary);\n  } // checkList = (id) => {\n  //   let src = '';\n  //   // let imgsrc = this.state.img.filter((img) => {\n  //   // \tif (img[1][0] === id) {\n  //   // \t\tsrc += img[0];\n  //   // \t}\n  //   // });\n  //   console.log(this.state.img, 'sdsdsds');\n  //   return src;\n  // };\n\n\n  render() {\n    let {\n      startingStore: {\n        listOfOrders,\n        editOrder,\n        listOfUsers\n      }\n    } = this.props;\n    let listOfPending = listOfOrders.filter(Pending => {\n      if (Pending.orderStatus === 'Pending Print') {\n        return Pending;\n      }\n    });\n\n    let findName = accID => {\n      let aw = listOfUsers.map(user => {\n        if (user._id === accID) {\n          return `${user.accFname} ${user.accLname}`;\n        }\n      });\n      return aw;\n    };\n\n    return /*#__PURE__*/React.createElement(MDBRow, {\n      className: \"mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(MDBCol, {\n      md: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(MDBCard, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(MDBCardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }\n    }, \"Pending Orders\"), /*#__PURE__*/React.createElement(MDBTable, {\n      hover: true,\n      className: \"tablescroll\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(MDBTableHead, {\n      color: \"blue-grey lighten-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }\n    }, \"Order ID \"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }\n    }, \"Account ID \"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }\n    }, \"Ordered by\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    }, \"Order Date\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }\n    }, \"Status\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }\n    }, \"Payment Status\"), /*#__PURE__*/React.createElement(\"th\", {\n      className: \"act\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }\n    }, \"Actions\"))), /*#__PURE__*/React.createElement(MDBTableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }, listOfPending.reverse().map(data => /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 23\n      }\n    }, data.orderID), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 23\n      }\n    }, data.accID), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 23\n      }\n    }, \" \", findName(data.accID), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 23\n      }\n    }, data.orderDate), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 23\n      }\n    }, data.orderStatus), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 23\n      }\n    }, data.paymentStatus), /*#__PURE__*/React.createElement(\"td\", {\n      className: \"oactions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ViewData, {\n      data: data.orderItems,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 27\n      }\n    }), ' '), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"btncon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: \"#!\",\n      className: \"approve\",\n      onClick: () => editOrder(data._id, 'Delivery', data.accID),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 27\n      }\n    }, \"Approve\"), /*#__PURE__*/React.createElement(\"a\", {\n      href: \"#!\",\n      className: \"reject\",\n      onClick: () => editOrder(data._id, 'PrintRejected', data.accID),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 27\n      }\n    }, \"Reject\")))))))))));\n  }\n\n}\n\nexport default inject('startingStore')(observer(PendingOrders));","map":{"version":3,"sources":["C:/Users/alqui/Desktop/Art Basically AWS/artfrontend/src/printingpartner/sections/CPendingOrders.js"],"names":["React","Component","MDBCard","MDBCardBody","MDBTable","MDBTableBody","MDBTableHead","MDBRow","MDBCol","inject","observer","ViewData","PendingOrders","constructor","props","state","img","componentDidMount","startingStore","getOrders","getAccounts","arrayBufferToBase64","buffer","binary","bytes","slice","call","Uint8Array","forEach","b","String","fromCharCode","window","btoa","render","listOfOrders","editOrder","listOfUsers","listOfPending","filter","Pending","orderStatus","findName","accID","aw","map","user","_id","accFname","accLname","reverse","data","orderID","orderDate","paymentStatus","orderItems"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {\r\n  MDBCard,\r\n  MDBCardBody,\r\n  MDBTable,\r\n  MDBTableBody,\r\n  MDBTableHead,\r\n  MDBRow,\r\n  MDBCol,\r\n} from 'mdbreact';\r\nimport {inject, observer} from 'mobx-react';\r\nimport ViewData from '../sections/ViewData';\r\nclass PendingOrders extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      img: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let {\r\n      startingStore: {getOrders, getAccounts},\r\n    } = this.props;\r\n    // getCategories();\r\n    getAccounts();\r\n    getOrders();\r\n  }\r\n\r\n  arrayBufferToBase64(buffer) {\r\n    var binary = '';\r\n    var bytes = [].slice.call(new Uint8Array(buffer));\r\n    bytes.forEach((b) => (binary += String.fromCharCode(b)));\r\n    return window.btoa(binary);\r\n  }\r\n\r\n  // checkList = (id) => {\r\n  //   let src = '';\r\n  //   // let imgsrc = this.state.img.filter((img) => {\r\n  //   // \tif (img[1][0] === id) {\r\n  //   // \t\tsrc += img[0];\r\n  //   // \t}\r\n  //   // });\r\n  //   console.log(this.state.img, 'sdsdsds');\r\n  //   return src;\r\n  // };\r\n\r\n  render() {\r\n    let {\r\n      startingStore: {listOfOrders, editOrder, listOfUsers},\r\n    } = this.props;\r\n    let listOfPending = listOfOrders.filter((Pending) => {\r\n      if (Pending.orderStatus === 'Pending Print') {\r\n        return Pending;\r\n      }\r\n    });\r\n\r\n    let findName = (accID) => {\r\n      let aw = listOfUsers.map((user) => {\r\n        if (user._id === accID) {\r\n          return `${user.accFname} ${user.accLname}`;\r\n        }\r\n      });\r\n      return aw;\r\n    };\r\n\r\n    return (\r\n      <MDBRow className='mb-4'>\r\n        <MDBCol md='12'>\r\n          <MDBCard>\r\n            <MDBCardBody>\r\n              <h3>Pending Orders</h3>\r\n              <MDBTable hover className='tablescroll'>\r\n                <MDBTableHead color='blue-grey lighten-4'>\r\n                  <tr>\r\n                    <th>Order ID </th>\r\n                    <th>Account ID </th>\r\n                    <th>Ordered by</th>\r\n                    <th>Order Date</th>\r\n                    <th>Status</th>\r\n                    <th>Payment Status</th>\r\n                    <th className='act'>Actions</th>\r\n                  </tr>\r\n                </MDBTableHead>\r\n                <MDBTableBody>\r\n                  {listOfPending.reverse().map((data) => (\r\n                    <tr>\r\n                      <td>{data.orderID}</td>\r\n                      <td>{data.accID}</td>\r\n                      <td> {findName(data.accID)} </td>\r\n                      <td>{data.orderDate}</td>\r\n                      <td>{data.orderStatus}</td>\r\n                      <td>{data.paymentStatus}</td>\r\n                      <td className='oactions'>\r\n                        <span>\r\n                          <ViewData data={data.orderItems} />{' '}\r\n                        </span>\r\n                        <span className='btncon'>\r\n                          <a\r\n                            href='#!'\r\n                            className='approve'\r\n                            onClick={() =>\r\n                              editOrder(data._id, 'Delivery', data.accID)\r\n                            }\r\n                          >\r\n                            Approve\r\n                          </a>\r\n                          <a\r\n                            href='#!'\r\n                            className='reject'\r\n                            onClick={() =>\r\n                              editOrder(data._id, 'PrintRejected', data.accID)\r\n                            }\r\n                          >\r\n                            Reject\r\n                          </a>\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </MDBTableBody>\r\n              </MDBTable>\r\n            </MDBCardBody>\r\n          </MDBCard>\r\n        </MDBCol>\r\n      </MDBRow>\r\n    );\r\n  }\r\n}\r\n\r\nexport default inject('startingStore')(observer(PendingOrders));\r\n"]},"metadata":{},"sourceType":"module"}