{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alqui\\\\Desktop\\\\Art Basically AWS\\\\artfrontend\\\\src\\\\printingpartner\\\\sections\\\\COrderDeli.js\";\nimport { MDBDataTable, MDBNavLink, MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBTable, MDBTableBody, MDBTableHead } from 'mdbreact';\nimport { inject, observer } from 'mobx-react';\nimport React, { Component, Fragment } from 'react';\nimport { message } from 'antd';\n\nclass ForDelivery extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      modal: false,\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    let {\n      startingStore: {\n        getOrders,\n        getAccounts\n      }\n    } = this.props;\n    getAccounts();\n    getOrders();\n  }\n\n  render() {\n    let {\n      startingStore: {\n        listOfOrders,\n        listOfUsers,\n        editOrder\n      }\n    } = this.props;\n\n    function createData(orderDB, items, id, orderBy, date, paymentStat, action) {\n      return {\n        orderDB,\n        items,\n        id,\n        orderBy,\n        date,\n        paymentStat,\n        action\n      };\n    }\n\n    let Corder = listOfOrders.filter(Delivery => {\n      if (Delivery.orderStatus === 'ForDelivery') {\n        return Delivery;\n      }\n    }).map(orders => {\n      return createData(orders, orders.orderItems, orders.orderID, listOfUsers.filter(usr => usr._id === orders.accID).map(user => user.accFname), orders.orderDate, orders.paymentStatus);\n    });\n\n    let moreinfo = itm => {};\n\n    let done = itm => {\n      editOrder(itm._id, 'Completed', itm.accID);\n\n      const success = () => {\n        message.loading('', 1).then(() => message.success('Order Completed', 3));\n      };\n\n      setTimeout(() => {\n        success();\n      }, 1000);\n    };\n\n    const ForDeliveryTable = () => {\n      const data = {\n        columns: [{\n          label: 'ID',\n          field: 'id',\n          sort: 'asc',\n          width: 'auto'\n        }, {\n          label: 'Order By',\n          field: 'orderBy',\n          sort: 'asc',\n          width: 'auto'\n        }, {\n          label: 'Date',\n          field: 'date',\n          sort: 'asc',\n          width: 'auto'\n        }, {\n          label: 'Payment Stat',\n          field: 'paymentStat',\n          sort: 'asc',\n          width: 'auto'\n        }, {\n          label: 'Action',\n          field: 'action',\n          sort: 'asc',\n          width: 'auto'\n        }],\n        rows: [...Corder.map((row, i) => ({\n          id: `${row.id}`,\n          orderBy: `${row.orderBy}`,\n          date: `${row.date}`,\n          paymentStat: `${row.paymentStat}`,\n          action: /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 16\n            }\n          }, /*#__PURE__*/React.createElement(MDBBtn, {\n            onClick: () => moreinfo(row.orderDB),\n            color: \"approve\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 21\n            }\n          }, \"More Info\"), /*#__PURE__*/React.createElement(MDBBtn, {\n            onClick: () => done(row.orderDB),\n            color: \"reject\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 9\n            }\n          }, \" Done\"))\n        }))]\n      };\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(MDBDataTable, {\n        striped: true,\n        bordered: true,\n        small: true,\n        data: data,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 5\n        }\n      }));\n    };\n\n    return /*#__PURE__*/React.createElement(ForDeliveryTable, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 3\n      }\n    });\n  }\n\n}\n\nexport default inject('startingStore')(observer(ForDelivery));","map":{"version":3,"sources":["C:/Users/alqui/Desktop/Art Basically AWS/artfrontend/src/printingpartner/sections/COrderDeli.js"],"names":["MDBDataTable","MDBNavLink","MDBBtn","MDBModal","MDBModalBody","MDBModalHeader","MDBTable","MDBTableBody","MDBTableHead","inject","observer","React","Component","Fragment","message","ForDelivery","state","modal","items","componentDidMount","startingStore","getOrders","getAccounts","props","render","listOfOrders","listOfUsers","editOrder","createData","orderDB","id","orderBy","date","paymentStat","action","Corder","filter","Delivery","orderStatus","map","orders","orderItems","orderID","usr","_id","accID","user","accFname","orderDate","paymentStatus","moreinfo","itm","done","success","loading","then","setTimeout","ForDeliveryTable","data","columns","label","field","sort","width","rows","row","i"],"mappings":"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","sourcesContent":["import { MDBDataTable,MDBNavLink,MDBBtn ,  MDBModal,\r\n  MDBModalBody,\r\n  MDBModalHeader,\r\n  MDBTable,\r\n  MDBTableBody,\r\n  MDBTableHead,} from 'mdbreact';\r\nimport {inject, observer} from 'mobx-react';\r\nimport React, { Component, Fragment } from 'react'\r\n\r\nimport {message} from 'antd';\r\n\r\n\r\n class ForDelivery extends Component {\r\n  state = {\r\n    modal: false,\r\n    items:[]\r\n   \r\n  };\r\n\r\n  componentDidMount() {\r\n    let {\r\n      startingStore: {getOrders, getAccounts},\r\n    } = this.props;\r\n   \r\n    getAccounts();\r\n    getOrders();\r\n  }\r\n  \r\n\r\n  render() {\r\n    let { startingStore: {listOfOrders,listOfUsers, editOrder}} = this.props;\r\n\r\n    \r\n    function createData(orderDB,items,id, orderBy, date, paymentStat,action) {\r\n      return { orderDB,items,id, orderBy, date, paymentStat,action };\r\n    }\r\n\r\nlet Corder = listOfOrders.filter((Delivery) => {\r\n            if (Delivery.orderStatus === 'ForDelivery') {\r\n              return Delivery;\r\n            }\r\n          }).map(orders =>{\r\n            return(createData(\r\n           orders,orders.orderItems,orders.orderID,listOfUsers.filter(usr=> usr._id === orders.accID).map(user =>( user.accFname\r\n              )),orders.orderDate,orders.paymentStatus\r\n            ))\r\n          })\r\n\r\n\r\n        let  moreinfo = (itm) => {\r\n        \r\n       \r\n          };\r\n          let done =(itm)=>{\r\n            editOrder(itm._id, 'Completed', itm.accID)\r\n\r\n            const success = () => {\r\n              message\r\n                .loading('', 1)\r\n                .then(() => message.success('Order Completed', 3));\r\n            };\r\n\r\n            setTimeout(() =>{\r\n              success()\r\n            },1000)\r\n          }\r\n        \r\n\r\nconst ForDeliveryTable = () => {\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: 'ID',\r\n        field: 'id',\r\n        sort: 'asc',\r\n        width: 'auto'\r\n      },\r\n      {\r\n        label: 'Order By',\r\n        field: 'orderBy',\r\n        sort: 'asc',\r\n        width: 'auto'\r\n      },\r\n      {\r\n        label: 'Date',\r\n        field: 'date',\r\n        sort: 'asc',\r\n        width: 'auto'\r\n      },\r\n\r\n      {\r\n        label: 'Payment Stat',\r\n        field: 'paymentStat',\r\n        sort: 'asc',\r\n        width: 'auto'\r\n      },\r\n      {\r\n        label: 'Action',\r\n        field: 'action',\r\n        sort: 'asc',\r\n        width: 'auto'\r\n      },\r\n    \r\n    ],\r\n    rows: \r\n   \r\n    [...Corder.map((row,i) => (\r\n      \r\n     {\r\n        id: `${row.id}`,\r\n        orderBy: `${row.orderBy}`,\r\n        date: `${row.date}`,\r\n      \r\n        paymentStat: `${row.paymentStat}`,\r\n        action:<div><MDBBtn  onClick={()=>moreinfo(row.orderDB)} color='approve'>More Info</MDBBtn>\r\n        <MDBBtn  onClick={()=>done(row.orderDB)} color='reject'> Done</MDBBtn></div>,\r\n      \r\n\r\n     }\r\n     \r\n     ))\r\n    ]\r\n\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n    <MDBDataTable\r\n      striped\r\n      bordered\r\n      small\r\n      data={data}\r\n    />\r\n\r\n\r\n  </Fragment>\r\n  );\r\n}\r\n\r\nreturn (\r\n  <ForDeliveryTable/>\r\n)\r\n}\r\n}\r\n\r\n\r\n\r\nexport default inject('startingStore')(observer(ForDelivery))\r\n"]},"metadata":{},"sourceType":"module"}