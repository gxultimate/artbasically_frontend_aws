{"ast":null,"code":"/* eslint no-param-reassign: [\"error\"] */\nimport Joi from 'joi';\nimport { toJS, isObservableArray, isObservableObject, isBoxedObservable, action, decorate } from 'mobx';\n\nclass Model {\n  constructor(props) {\n    this.validate = () => Joi.validate(this, this.constructor.schema, {\n      skipFunctions: true,\n      abortEarly: false,\n      allowUnknown: false\n    });\n\n    this.setProperty = (property, value) => {\n      this.handleProperties(property, value);\n    };\n\n    this.handleProperties = (property, value, deepProperty = undefined) => {\n      if (typeof property !== 'string') {\n        throw new Error('accepts property of type string');\n      }\n\n      const properties = property.split('.');\n      const prop = properties.shift();\n\n      if (properties.length > 0) {\n        if (deepProperty) {\n          return this.handleProperties(properties.join('.'), value, deepProperty[prop]);\n        }\n\n        return this.handleProperties(properties.join('.'), value, this[prop]);\n      }\n\n      if (deepProperty) {\n        deepProperty[prop] = value;\n        return true;\n      }\n\n      this[prop] = value;\n      return true;\n    };\n\n    Object.assign(this, props);\n  }\n\n  static get schema() {\n    return {};\n  }\n\n  // get toJS of each property that is an observable\n  get toJSproperties() {\n    let propertiesClone = {};\n    Object.keys(this).forEach(prop => {\n      const value = this[prop];\n\n      if (isObservableArray(value) || isObservableObject(value) || isBoxedObservable(value)) {\n        propertiesClone = { ...propertiesClone,\n          [prop]: toJS(value)\n        };\n      }\n    });\n    return { ...this,\n      ...propertiesClone\n    };\n  }\n\n  get errors() {\n    const {\n      error\n    } = this.validate();\n\n    if (error) {\n      const {\n        details\n      } = error;\n      return details;\n    }\n\n    return [];\n  }\n\n  get isValid() {\n    const {\n      error\n    } = this.validate();\n    return error === null;\n  }\n\n}\n\ndecorate(Model, {\n  setProperty: action\n});\nexport default Model;","map":{"version":3,"sources":["C:/Users/alqui/Desktop/Art Basically AWS/artfrontend/src/models/Model.js"],"names":["Joi","toJS","isObservableArray","isObservableObject","isBoxedObservable","action","decorate","Model","constructor","props","validate","schema","skipFunctions","abortEarly","allowUnknown","setProperty","property","value","handleProperties","deepProperty","undefined","Error","properties","split","prop","shift","length","join","Object","assign","toJSproperties","propertiesClone","keys","forEach","errors","error","details","isValid"],"mappings":"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","sourcesContent":["/* eslint no-param-reassign: [\"error\"] */\n\nimport Joi from 'joi';\nimport {\n  toJS,\n  isObservableArray,\n  isObservableObject,\n  isBoxedObservable,\n  action,\n  decorate,\n} from 'mobx';\n\nclass Model {\n  constructor(props) {\n    Object.assign(this, props);\n  }\n\n  static get schema() {\n    return {};\n  }\n\n  validate = () => (\n    Joi.validate(\n      this,\n      this.constructor.schema,\n      {\n        skipFunctions: true,\n        abortEarly: false,\n        allowUnknown: false,\n      },\n    )\n  );\n\n  setProperty = (property, value) => {\n    this.handleProperties(property, value);\n  };\n\n  // get toJS of each property that is an observable\n  get toJSproperties() {\n    let propertiesClone = {};\n\n    Object.keys(this).forEach((prop) => {\n      const value = this[prop];\n      if (isObservableArray(value) || isObservableObject(value) || isBoxedObservable(value)) {\n        propertiesClone = { ...propertiesClone, [prop]: toJS(value) };\n      }\n    });\n\n    return { ...this, ...propertiesClone };\n  }\n\n  get errors() {\n    const { error } = this.validate();\n\n    if (error) {\n      const { details } = error;\n      return details;\n    }\n\n    return [];\n  }\n\n  get isValid() {\n    const { error } = this.validate();\n    return error === null;\n  }\n\n  handleProperties = (property, value, deepProperty = undefined) => {\n    if (typeof property !== 'string') {\n      throw new Error('accepts property of type string');\n    }\n\n    const properties = property.split('.');\n    const prop = properties.shift();\n\n    if (properties.length > 0) {\n      if (deepProperty) {\n        return this.handleProperties(properties.join('.'), value, deepProperty[prop]);\n      }\n      return this.handleProperties(properties.join('.'), value, this[prop]);\n    }\n    if (deepProperty) {\n      (deepProperty[prop] = value);\n      return true;\n    }\n    this[prop] = value;\n    return true;\n  }\n}\n\ndecorate(Model, {\n  setProperty: action,\n});\n\nexport default Model;\n"]},"metadata":{},"sourceType":"module"}