{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alqui\\\\Desktop\\\\Art Basically AWS\\\\artfrontend\\\\src\\\\admin\\\\sections\\\\OrderTable.js\";\nimport React, { Component } from 'react';\nimport { MDBCard, MDBCardBody, MDBTable, MDBTableBody, MDBTableHead, MDBRow, MDBCol } from 'mdbreact';\nimport { inject, observer } from 'mobx-react';\nimport ViewOrderDetails from './ViewOrderDetails';\n\nclass OrderTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      img: []\n    };\n  }\n\n  componentDidMount() {\n    let {\n      startingStore: {\n        getOrders,\n        getAccounts\n      }\n    } = this.props; // getCategories();\n\n    getAccounts();\n    getOrders();\n  }\n\n  arrayBufferToBase64(buffer) {\n    var binary = '';\n    var bytes = [].slice.call(new Uint8Array(buffer));\n    bytes.forEach(b => binary += String.fromCharCode(b));\n    return window.btoa(binary);\n  }\n\n  render() {\n    let {\n      startingStore: {\n        listOfOrders,\n        editOrder,\n        listOfUsers\n      }\n    } = this.props; // let listOfPending = listOfOrders.filter((Pending) => {\n    //   if (Pending.orderStatus === 'Pending') {\n    //     return Pending;\n    //   }\n    // });\n\n    let findName = accID => {\n      let aw = listOfUsers.map(user => {\n        if (user._id === accID) {\n          return `${user.accFname} ${user.accLname}`;\n        }\n      });\n      return aw;\n    };\n\n    let findTotal = orderItems => {\n      let aw = orderItems.reduce((total, user) => {\n        return parseFloat(total) + parseFloat(user.artworkPaymentAmount);\n      }, 0);\n      return aw;\n    };\n\n    return /*#__PURE__*/React.createElement(MDBRow, {\n      className: \"mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(MDBCol, {\n      md: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(MDBCard, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(MDBCardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 15\n      }\n    }, \"Order List\"), /*#__PURE__*/React.createElement(MDBTable, {\n      hover: true,\n      className: \"tablescroll\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(MDBTableHead, {\n      color: \"blue-grey lighten-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }\n    }, \"Order ID \"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }\n    }, \"Account ID \"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }\n    }, \"Ordered by\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    }, \"Order Date\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }\n    }, \"Total Amount\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }\n    }, \"Order Status\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }\n    }, \"Payment Status\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    }, \"Shipping Method\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }\n    }, \"Action\"))), /*#__PURE__*/React.createElement(MDBTableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }, listOfOrders.reverse().map(data => /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 23\n      }\n    }, \" \", data.orderID, \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 23\n      }\n    }, \" \", data.accID, \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 23\n      }\n    }, \" \", findName(data.accID), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 23\n      }\n    }, \" \", data.orderDate, \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 23\n      }\n    }, \" \", findTotal(data.orderItems), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 23\n      }\n    }, \" \", data.orderStatus, \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 23\n      }\n    }, \" \", data.paymentStatus, \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 23\n      }\n    }, \" \", data.modeOfPayment, \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      className: \"oactions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(ViewOrderDetails, {\n      data: data.orderItems,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 25\n      }\n    }))))))))));\n  }\n\n}\n\nexport default inject('startingStore')(observer(OrderTable));","map":{"version":3,"sources":["C:/Users/alqui/Desktop/Art Basically AWS/artfrontend/src/admin/sections/OrderTable.js"],"names":["React","Component","MDBCard","MDBCardBody","MDBTable","MDBTableBody","MDBTableHead","MDBRow","MDBCol","inject","observer","ViewOrderDetails","OrderTable","constructor","props","state","img","componentDidMount","startingStore","getOrders","getAccounts","arrayBufferToBase64","buffer","binary","bytes","slice","call","Uint8Array","forEach","b","String","fromCharCode","window","btoa","render","listOfOrders","editOrder","listOfUsers","findName","accID","aw","map","user","_id","accFname","accLname","findTotal","orderItems","reduce","total","parseFloat","artworkPaymentAmount","reverse","data","orderID","orderDate","orderStatus","paymentStatus","modeOfPayment"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {\r\n  MDBCard,\r\n  MDBCardBody,\r\n  MDBTable,\r\n  MDBTableBody,\r\n  MDBTableHead,\r\n  MDBRow,\r\n  MDBCol,\r\n} from 'mdbreact';\r\nimport {inject, observer} from 'mobx-react';\r\nimport ViewOrderDetails from './ViewOrderDetails';\r\n\r\nclass OrderTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      img: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let {\r\n      startingStore: {getOrders, getAccounts},\r\n    } = this.props;\r\n    // getCategories();\r\n    getAccounts();\r\n    getOrders();\r\n  }\r\n\r\n  arrayBufferToBase64(buffer) {\r\n    var binary = '';\r\n    var bytes = [].slice.call(new Uint8Array(buffer));\r\n    bytes.forEach((b) => (binary += String.fromCharCode(b)));\r\n    return window.btoa(binary);\r\n  }\r\n\r\n  render() {\r\n    let {\r\n      startingStore: {listOfOrders, editOrder, listOfUsers},\r\n    } = this.props;\r\n    // let listOfPending = listOfOrders.filter((Pending) => {\r\n    //   if (Pending.orderStatus === 'Pending') {\r\n    //     return Pending;\r\n    //   }\r\n    // });\r\n\r\n    let findName = (accID) => {\r\n      let aw = listOfUsers.map((user) => {\r\n        if (user._id === accID) {\r\n          return `${user.accFname} ${user.accLname}`;\r\n        }\r\n      });\r\n      return aw;\r\n    };\r\n    let findTotal = (orderItems) => {\r\n      let aw = orderItems.reduce((total, user) => {\r\n        return parseFloat(total) + parseFloat(user.artworkPaymentAmount);\r\n      }, 0);\r\n      return aw;\r\n    };\r\n\r\n    return (\r\n      <MDBRow className='mb-4'>\r\n        <MDBCol md='12'>\r\n          <MDBCard>\r\n            <MDBCardBody>\r\n              <h3>Order List</h3>\r\n              <MDBTable hover className='tablescroll'>\r\n                <MDBTableHead color='blue-grey lighten-4'>\r\n                  <tr>\r\n                    <th>Order ID </th>\r\n                    <th>Account ID </th>\r\n                    <th>Ordered by</th>\r\n                    <th>Order Date</th>\r\n                    <th>Total Amount</th>\r\n                    <th>Order Status</th>\r\n                    <th>Payment Status</th>\r\n                    <th>Shipping Method</th>\r\n                    <th>Action</th>\r\n                  </tr>\r\n                </MDBTableHead>\r\n                <MDBTableBody>\r\n                  {listOfOrders.reverse().map((data) => (\r\n                    <tr>\r\n                      <td> {data.orderID} </td>\r\n                      <td> {data.accID} </td>\r\n                      <td> {findName(data.accID)} </td>\r\n                      <td> {data.orderDate} </td>\r\n                      <td> {findTotal(data.orderItems)} </td>\r\n                      <td> {data.orderStatus} </td>\r\n                      <td> {data.paymentStatus} </td>\r\n                      <td> {data.modeOfPayment} </td>\r\n                      <td className='oactions'>\r\n                        <ViewOrderDetails data={data.orderItems} />\r\n                        {/* <span className='btncon'>\r\n                          <a\r\n                            href='#!'\r\n                            className='approve'\r\n                            onClick={() =>\r\n                              editOrder(\r\n                                data._id,\r\n                                'Pending Printing',\r\n                                data.accID\r\n                              )\r\n                            }\r\n                          >\r\n                            Approve\r\n                          </a>\r\n                          <a\r\n                            href='#!'\r\n                            className='reject'\r\n                            onClick={() =>\r\n                              editOrder(data._id, 'Rejected', data.accID)\r\n                            }\r\n                          >\r\n                            Reject\r\n                          </a>\r\n                        </span> */}\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </MDBTableBody>\r\n              </MDBTable>\r\n            </MDBCardBody>\r\n          </MDBCard>\r\n        </MDBCol>\r\n      </MDBRow>\r\n    );\r\n  }\r\n}\r\n\r\nexport default inject('startingStore')(observer(OrderTable));\r\n"]},"metadata":{},"sourceType":"module"}