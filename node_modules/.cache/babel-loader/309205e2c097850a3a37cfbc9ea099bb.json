{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alqui\\\\Desktop\\\\Art Basically AWS\\\\artfrontend\\\\src\\\\components\\\\GoogleLogin\\\\index.js\";\nimport React, { Component } from 'react';\nimport GoogleLogin from 'react-google-login';\nimport { withRouter } from 'react-router-dom';\nimport { inject, observer } from 'mobx-react';\nimport moment from 'moment';\nimport { message } from 'antd';\nimport './../../css/style.css';\nimport './../../css/normalize.css';\nimport './../../css/printart.css';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass GmailLogin extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.responseGoogle = response => {\n      if (response !== undefined || response != null) {\n        console.log(response);\n        console.log(response.profileObj);\n        let {\n          startingStore: {\n            account,\n            loginAccount,\n            getArtists,\n            getArtworkInfo,\n            getEmergingArtistArtwork,\n            getArtistFollowArtwork\n          }\n        } = this.props;\n        loginAccount().then(res => {\n          getArtworkInfo();\n          getEmergingArtistArtwork();\n          getArtists();\n          getArtistFollowArtwork(account.accEmailAddress);\n\n          if (res === true) {\n            const success = () => {\n              message.loading('Signing in..', 1.2).then(() => message.error('Login Unsuccessful', 1));\n            };\n\n            setTimeout(() => {\n              success();\n            }, 1000);\n            this.props.history.push('/');\n          } else if (res === 2) {\n            const success = () => {\n              message.loading('Signing in..', 1.2).then(() => message.success('Successfully Login', 1));\n            };\n\n            setTimeout(() => {\n              success();\n            }, 200);\n            this.props.history.push('/Home');\n          } else if ( // (typeof res === 'string')\n          res === 4) {\n            const success = () => {\n              message.loading('Signing in..', 1.2).then(() => message.success('Successfully Login', 1));\n            };\n\n            setTimeout(() => {\n              success();\n            }, 200);\n            this.props.history.push(`/Home`);\n          } else {\n            const success = () => {\n              message.loading('Signing in..', 1.2).then(() => message.error('Login Unsuccessful', 1));\n            };\n\n            setTimeout(() => {\n              success();\n            }, 200);\n            this.props.history.push('/');\n          }\n        });\n      } else {\n        console.log('error');\n      }\n    };\n  }\n\n  componentDidMount() {\n    let {\n      startingStore: {\n        getAccounts\n      }\n    } = this.props;\n    getAccounts();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(GoogleLogin, {\n      clientId: \"20336597669-2frj8irujj3t3dtdvvop9p7jip354cic.apps.googleusercontent.com\",\n      buttonText: \"Log in with Google\",\n      onSuccess: this.responseGoogle,\n      onFailure: this.responseGoogle,\n      cookiePolicy: 'single_host_origin',\n      className: \"GoogleLoginBtn\",\n      icon: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default withRouter(inject('startingStore')(observer(GmailLogin)));","map":{"version":3,"sources":["C:/Users/alqui/Desktop/Art Basically AWS/artfrontend/src/components/GoogleLogin/index.js"],"names":["React","Component","GoogleLogin","withRouter","inject","observer","moment","message","GmailLogin","responseGoogle","response","undefined","console","log","profileObj","startingStore","account","loginAccount","getArtists","getArtworkInfo","getEmergingArtistArtwork","getArtistFollowArtwork","props","then","res","accEmailAddress","success","loading","error","setTimeout","history","push","componentDidMount","getAccounts","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,SAAQC,MAAR,EAAeC,QAAf,QAA8B,YAA9B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAAQC,OAAR,QAAsB,MAAtB;AAGA,OAAO,uBAAP;AACA,OAAO,2BAAP;AACA,OAAO,0BAAP;AACA,OAAO,uCAAP;;AAEA,MAAMC,UAAN,SAAyBP,SAAzB,CAAmC;AAAA;AAAA;;AAAA,SAOjCQ,cAPiC,GAOfC,QAAD,IAAc;AAG7B,UAAGA,QAAQ,KAAKC,SAAb,IAA0BD,QAAQ,IAAI,IAAzC,EAA8C;AAC5CE,QAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,UAArB;AAEA,YAAI;AAAEC,UAAAA,aAAa,EAAE;AAAGC,YAAAA,OAAH;AAAYC,YAAAA,YAAZ;AAA0BC,YAAAA,UAA1B;AACnBC,YAAAA,cADmB;AAEnBC,YAAAA,wBAFmB;AAGnBC,YAAAA;AAHmB;AAAjB,YAG0B,KAAKC,KAHnC;AAUAL,QAAAA,YAAY,GAAGM,IAAf,CAAqBC,GAAD,IAAS;AAC3BL,UAAAA,cAAc;AACdC,UAAAA,wBAAwB;AACxBF,UAAAA,UAAU;AACVG,UAAAA,sBAAsB,CAACL,OAAO,CAACS,eAAT,CAAtB;;AACA,cAAID,GAAG,KAAK,IAAZ,EAAkB;AAChB,kBAAME,OAAO,GAAG,MAAM;AACpBnB,cAAAA,OAAO,CACJoB,OADH,CACW,cADX,EAC2B,GAD3B,EAEGJ,IAFH,CAEQ,MAAMhB,OAAO,CAACqB,KAAR,CAAc,oBAAd,EAAoC,CAApC,CAFd;AAGD,aAJD;;AAMAC,YAAAA,UAAU,CAAC,MAAM;AACfH,cAAAA,OAAO;AACR,aAFS,EAEP,IAFO,CAAV;AAGA,iBAAKJ,KAAL,CAAWQ,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACD,WAXD,MAWO,IAAIP,GAAG,KAAK,CAAZ,EAAe;AACpB,kBAAME,OAAO,GAAG,MAAM;AACpBnB,cAAAA,OAAO,CACJoB,OADH,CACW,cADX,EAC2B,GAD3B,EAEGJ,IAFH,CAEQ,MAAMhB,OAAO,CAACmB,OAAR,CAAgB,oBAAhB,EAAsC,CAAtC,CAFd;AAGD,aAJD;;AAMAG,YAAAA,UAAU,CAAC,MAAM;AACfH,cAAAA,OAAO;AACR,aAFS,EAEP,GAFO,CAAV;AAGA,iBAAKJ,KAAL,CAAWQ,OAAX,CAAmBC,IAAnB,CAAwB,OAAxB;AACD,WAXM,MAWA,KACP;AACEP,UAAAA,GAAG,KAAK,CAFH,EAGN;AACC,kBAAME,OAAO,GAAG,MAAM;AACpBnB,cAAAA,OAAO,CACJoB,OADH,CACW,cADX,EAC2B,GAD3B,EAEGJ,IAFH,CAEQ,MAAMhB,OAAO,CAACmB,OAAR,CAAgB,oBAAhB,EAAsC,CAAtC,CAFd;AAGD,aAJD;;AAMAG,YAAAA,UAAU,CAAC,MAAM;AACfH,cAAAA,OAAO;AACR,aAFS,EAEP,GAFO,CAAV;AAGA,iBAAKJ,KAAL,CAAWQ,OAAX,CAAmBC,IAAnB,CAAyB,OAAzB;AACD,WAdM,MAcA;AACL,kBAAML,OAAO,GAAG,MAAM;AACpBnB,cAAAA,OAAO,CACJoB,OADH,CACW,cADX,EAC2B,GAD3B,EAEGJ,IAFH,CAEQ,MAAMhB,OAAO,CAACqB,KAAR,CAAc,oBAAd,EAAoC,CAApC,CAFd;AAGD,aAJD;;AAMAC,YAAAA,UAAU,CAAC,MAAM;AACfH,cAAAA,OAAO;AACR,aAFS,EAEP,GAFO,CAAV;AAGA,iBAAKJ,KAAL,CAAWQ,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACD;AACF,SArDD;AAwDD,OAtED,MAuEI;AACFnB,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD;AACF,KApFgC;AAAA;;AAEjCmB,EAAAA,iBAAiB,GAAE;AACjB,QAAI;AAACjB,MAAAA,aAAa,EAAC;AAACkB,QAAAA;AAAD;AAAf,QAA8B,KAAKX,KAAvC;AACAW,IAAAA,WAAW;AACZ;;AAgFDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,WAAD;AACE,MAAA,QAAQ,EAAC,yEADX;AAEE,MAAA,UAAU,EAAC,oBAFb;AAGE,MAAA,SAAS,EAAE,KAAKzB,cAHlB;AAIE,MAAA,SAAS,EAAE,KAAKA,cAJlB;AAKE,MAAA,YAAY,EAAE,oBALhB;AAME,MAAA,SAAS,EAAC,gBANZ;AAOE,MAAA,IAAI,EAAE,IAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAaD;;AAnGgC;;AAuGnC,eAAeN,UAAU,CAACC,MAAM,CAAC,eAAD,CAAN,CAAwBC,QAAQ,CAACG,UAAD,CAAhC,CAAD,CAAzB","sourcesContent":["import React, {Component} from 'react';\r\nimport GoogleLogin from 'react-google-login';\r\nimport {withRouter} from 'react-router-dom'\r\nimport {inject,observer} from 'mobx-react'\r\nimport moment from 'moment'\r\nimport {message} from 'antd';\r\n\r\n\r\nimport './../../css/style.css';\r\nimport './../../css/normalize.css';\r\nimport './../../css/printart.css';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nclass GmailLogin extends Component {\r\n\r\n  componentDidMount(){\r\n    let {startingStore:{getAccounts}}=this.props;\r\n    getAccounts();\r\n  }\r\n\r\n  responseGoogle = (response) => {\r\n \r\n\r\n    if(response !== undefined || response != null){\r\n      console.log(response);\r\n      console.log(response.profileObj,);\r\n\r\n      let { startingStore: {  account ,loginAccount ,getArtists,\r\n        getArtworkInfo,\r\n        getEmergingArtistArtwork,\r\n        getArtistFollowArtwork} } = this.props;\r\n\r\n\r\n\r\n\r\n\r\n\r\n      loginAccount().then((res) => {\r\n        getArtworkInfo();\r\n        getEmergingArtistArtwork();\r\n        getArtists();\r\n        getArtistFollowArtwork(account.accEmailAddress);\r\n        if (res === true) {\r\n          const success = () => {\r\n            message\r\n              .loading('Signing in..', 1.2)\r\n              .then(() => message.error('Login Unsuccessful', 1));\r\n          };\r\n  \r\n          setTimeout(() => {\r\n            success();\r\n          }, 1000);\r\n          this.props.history.push('/');\r\n        } else if (res === 2) {\r\n          const success = () => {\r\n            message\r\n              .loading('Signing in..', 1.2)\r\n              .then(() => message.success('Successfully Login', 1));\r\n          };\r\n  \r\n          setTimeout(() => {\r\n            success();\r\n          }, 200);\r\n          this.props.history.push('/Home');\r\n        } else if \r\n        // (typeof res === 'string')\r\n        ( res === 4)\r\n         {\r\n          const success = () => {\r\n            message\r\n              .loading('Signing in..', 1.2)\r\n              .then(() => message.success('Successfully Login', 1));\r\n          };\r\n  \r\n          setTimeout(() => {\r\n            success();\r\n          }, 200);\r\n          this.props.history.push(`/Home`);\r\n        } else {\r\n          const success = () => {\r\n            message\r\n              .loading('Signing in..', 1.2)\r\n              .then(() => message.error('Login Unsuccessful', 1));\r\n          };\r\n  \r\n          setTimeout(() => {\r\n            success();\r\n          }, 200);\r\n          this.props.history.push('/');\r\n        }\r\n      });\r\n    \r\n\r\n    }\r\n    else{\r\n      console.log('error')\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <GoogleLogin\r\n          clientId='20336597669-2frj8irujj3t3dtdvvop9p7jip354cic.apps.googleusercontent.com'\r\n          buttonText='Log in with Google'\r\n          onSuccess={this.responseGoogle}\r\n          onFailure={this.responseGoogle}\r\n          cookiePolicy={'single_host_origin'}\r\n          className='GoogleLoginBtn'\r\n          icon={true}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default withRouter(inject('startingStore')(observer(GmailLogin)));\r\n"]},"metadata":{},"sourceType":"module"}