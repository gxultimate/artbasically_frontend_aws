{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alqui\\\\Desktop\\\\Art Basically AWS\\\\artfrontend\\\\src\\\\components\\\\AddToBag.js\";\nimport { MDBBtn, MDBModal, MDBModalBody, MDBModalHeader } from 'mdbreact';\nimport { inject, observer } from 'mobx-react';\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport Cart from './Cart';\nimport notify from '../components/Notif';\n\nclass AddToBag extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      modal1: false,\n      selected: [],\n      selectedCheckBox: []\n    };\n\n    this.toggle = () => {\n      let nr = 1;\n      let modalNumber = 'modal' + nr;\n      this.setState({\n        [modalNumber]: !this.state[modalNumber]\n      });\n    };\n\n    this.addTocart = () => {\n      let {\n        startingStore: {\n          cart,\n          addToCart\n        }\n      } = this.props;\n      let userData = JSON.parse(sessionStorage.getItem('userData'));\n      let currentDate = new Date();\n      cart.setProperty('artistName', this.props.cartData.artistName);\n      cart.setProperty('artworkName', this.props.cartData.artName);\n      cart.setProperty('artworkImg', this.props.cartData.artworkImg);\n      cart.setProperty('artworkPrice', this.props.cartData.artPrice);\n      cart.setProperty('artworkPaymentAmount', parseFloat(this.props.cartData.artPrice) * parseFloat(cart.artworkQuantity));\n      cart.setProperty('accID', userData.accID);\n      cart.setProperty('dateOfTransaction', currentDate);\n\n      if (cart.artworkQuantity !== '' || cart.artworkQuantity !== null) {\n        notify('success', 'Artwork added successfully');\n        addToCart();\n      } else {\n        notify('error', 'Unsuccessful adding artwork'); // ari di butang ang alert!!!!!!!!!!!!!!!!!!!!!!\n      }\n    };\n\n    this.selectedValue = (index, checked, item) => {\n      if (checked === true) {\n        this.state.selected.push(item);\n        this.state.selectedCheckBox.push(index);\n      } else {\n        let selectedArray = [];\n        let selectedCheck = []; // let data = this.state.selected.filter((data, indexer) => {\n        // \tif (indexer !== index) {\n        // \t\tselectedArray.push(data);\n        // \t}\n        // });\n        // let indexes = this.state.selectedCheckBox.filter((data, indexer) => {\n        // \tif (indexer !== index) {\n        // \t\tselectedCheck.push(data);\n        // \t}\n        // });\n\n        this.setState({\n          selected: selectedArray,\n          selectedCheckBox: selectedCheck\n        });\n      }\n    };\n\n    this.deleteItem = item => {\n      let {\n        startingStore: {\n          editToCart\n        }\n      } = this.props;\n      editToCart(item);\n    };\n\n    this.addOrder = () => {\n      let {\n        startingStore: {\n          order,\n          addOrder\n        }\n      } = this.props;\n      let userData = JSON.parse(sessionStorage.getItem('userData'));\n      let currentDate = new Date();\n      order.setProperty('orderID', `${this.getHash('order')}-${Math.floor(1000 + Math.random() * 9000)}`);\n      order.setProperty('modeOfPayment', 'COD');\n      order.setProperty('orderDate', currentDate);\n      order.setProperty('orderItems', this.state.selected);\n      order.setProperty('orderStatus', 'Pending');\n      order.setProperty('paymentStatus', 'Pending');\n      order.setProperty('accID', userData);\n      addOrder();\n    };\n\n    this.selectedCheck = data => {\n      this.setState({\n        selectedCheck: data\n      });\n    };\n  }\n\n  render() {\n    let {\n      startingStore: {\n        listOfUserCart\n      }\n    } = this.props;\n    let totalPrice = listOfUserCart.reduce((total, item) => total + parseFloat(item.artworkPaymentAmount), 0);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"btnmodal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(MDBBtn, {\n      disabled: !this.props.disable,\n      onClick: () => {\n        this.toggle();\n        this.addTocart();\n      },\n      color: \"yellow\",\n      size: \"md\",\n      style: {\n        borderRadius: '50px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }, \"Add to Cart\"), /*#__PURE__*/React.createElement(MDBModal, {\n      isOpen: this.state.modal1,\n      toggle: () => {\n        this.toggle();\n      },\n      size: \"lg\",\n      centered: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(MDBModalHeader, {\n      toggle: () => {\n        this.toggle();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 13\n      }\n    }, \"Cart\")), /*#__PURE__*/React.createElement(MDBModalBody, {\n      className: \"cartord\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Cart, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nexport default withRouter(inject('startingStore')(observer(AddToBag)));","map":{"version":3,"sources":["C:/Users/alqui/Desktop/Art Basically AWS/artfrontend/src/components/AddToBag.js"],"names":["MDBBtn","MDBModal","MDBModalBody","MDBModalHeader","inject","observer","React","Component","withRouter","Cart","notify","AddToBag","state","modal1","selected","selectedCheckBox","toggle","nr","modalNumber","setState","addTocart","startingStore","cart","addToCart","props","userData","JSON","parse","sessionStorage","getItem","currentDate","Date","setProperty","cartData","artistName","artName","artworkImg","artPrice","parseFloat","artworkQuantity","accID","selectedValue","index","checked","item","push","selectedArray","selectedCheck","deleteItem","editToCart","addOrder","order","getHash","Math","floor","random","data","render","listOfUserCart","totalPrice","reduce","total","artworkPaymentAmount","disable","borderRadius"],"mappings":"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","sourcesContent":["import {MDBBtn, MDBModal, MDBModalBody, MDBModalHeader} from 'mdbreact';\r\nimport {inject, observer} from 'mobx-react';\r\nimport React, {Component} from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\nimport Cart from './Cart';\r\nimport notify from '../components/Notif';\r\nclass AddToBag extends Component {\r\n  state = {\r\n    modal1: false,\r\n    selected: [],\r\n    selectedCheckBox: [],\r\n  };\r\n\r\n  toggle = () => {\r\n    let nr = 1;\r\n    let modalNumber = 'modal' + nr;\r\n    this.setState({\r\n      [modalNumber]: !this.state[modalNumber],\r\n    });\r\n  };\r\n\r\n  addTocart = () => {\r\n    let {\r\n      startingStore: {cart, addToCart},\r\n    } = this.props;\r\n    let userData = JSON.parse(sessionStorage.getItem('userData'));\r\n    let currentDate = new Date();\r\n\r\n    cart.setProperty('artistName', this.props.cartData.artistName);\r\n    cart.setProperty('artworkName', this.props.cartData.artName);\r\n    cart.setProperty('artworkImg', this.props.cartData.artworkImg);\r\n    cart.setProperty('artworkPrice', this.props.cartData.artPrice);\r\n    cart.setProperty(\r\n      'artworkPaymentAmount',\r\n      parseFloat(this.props.cartData.artPrice) *\r\n        parseFloat(cart.artworkQuantity)\r\n    );\r\n    cart.setProperty('accID', userData.accID);\r\n    cart.setProperty('dateOfTransaction', currentDate);\r\n    if (cart.artworkQuantity !== '' || cart.artworkQuantity !== null) {\r\n      notify('success', 'Artwork added successfully');\r\n      addToCart();\r\n    } else {\r\n      notify('error', 'Unsuccessful adding artwork');\r\n      // ari di butang ang alert!!!!!!!!!!!!!!!!!!!!!!\r\n    }\r\n  };\r\n\r\n  selectedValue = (index, checked, item) => {\r\n    if (checked === true) {\r\n      this.state.selected.push(item);\r\n      this.state.selectedCheckBox.push(index);\r\n    } else {\r\n      let selectedArray = [];\r\n      let selectedCheck = [];\r\n\r\n      // let data = this.state.selected.filter((data, indexer) => {\r\n      // \tif (indexer !== index) {\r\n      // \t\tselectedArray.push(data);\r\n      // \t}\r\n      // });\r\n\r\n      // let indexes = this.state.selectedCheckBox.filter((data, indexer) => {\r\n      // \tif (indexer !== index) {\r\n      // \t\tselectedCheck.push(data);\r\n      // \t}\r\n      // });\r\n\r\n      this.setState({\r\n        selected: selectedArray,\r\n        selectedCheckBox: selectedCheck,\r\n      });\r\n    }\r\n  };\r\n\r\n  deleteItem = (item) => {\r\n    let {\r\n      startingStore: {editToCart},\r\n    } = this.props;\r\n\r\n    editToCart(item);\r\n  };\r\n\r\n  addOrder = () => {\r\n    let {\r\n      startingStore: {order, addOrder},\r\n    } = this.props;\r\n    let userData = JSON.parse(sessionStorage.getItem('userData'));\r\n    let currentDate = new Date();\r\n\r\n    order.setProperty(\r\n      'orderID',\r\n      `${this.getHash('order')}-${Math.floor(1000 + Math.random() * 9000)}`\r\n    );\r\n    order.setProperty('modeOfPayment', 'COD');\r\n    order.setProperty('orderDate', currentDate);\r\n    order.setProperty('orderItems', this.state.selected);\r\n    order.setProperty('orderStatus', 'Pending');\r\n    order.setProperty('paymentStatus', 'Pending');\r\n    order.setProperty('accID', userData);\r\n    addOrder();\r\n  };\r\n\r\n  selectedCheck = (data) => {\r\n    this.setState({\r\n      selectedCheck: data,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let {\r\n      startingStore: {listOfUserCart},\r\n    } = this.props;\r\n\r\n    let totalPrice = listOfUserCart.reduce(\r\n      (total, item) => total + parseFloat(item.artworkPaymentAmount),\r\n      0\r\n    );\r\n\r\n    return (\r\n      <div className='btnmodal'>\r\n        <MDBBtn\r\n          disabled={!this.props.disable}\r\n          onClick={() => {\r\n            this.toggle();\r\n            this.addTocart();\r\n          }}\r\n          color='yellow'\r\n          size='md'\r\n          style={{borderRadius: '50px'}}\r\n        >\r\n          Add to Cart\r\n        </MDBBtn>\r\n        <MDBModal\r\n          isOpen={this.state.modal1}\r\n          toggle={() => {\r\n            this.toggle();\r\n          }}\r\n          size='lg'\r\n          centered\r\n        >\r\n          <MDBModalHeader\r\n            toggle={() => {\r\n              this.toggle();\r\n            }}\r\n          >\r\n            <h3>Cart</h3>\r\n          </MDBModalHeader>\r\n          <MDBModalBody className='cartord'>\r\n            <Cart />\r\n          </MDBModalBody>\r\n        </MDBModal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(inject('startingStore')(observer(AddToBag)));\r\n"]},"metadata":{},"sourceType":"module"}