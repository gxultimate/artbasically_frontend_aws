'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _enzymeAdapterReact = require('enzyme-adapter-react-16');

var _enzymeAdapterReact2 = _interopRequireDefault(_enzymeAdapterReact);

var _jsdom = require('jsdom');

var _shortid = require('shortid');

var _shortid2 = _interopRequireDefault(_shortid);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-undef, max-len, no-console */
jest.dontMock('../Receiver');
jest.dontMock('../index');
jest.dontMock('classnames');

var FileUploader = require('../index');
var uploadStatus = FileUploader.status;
var Receiver = FileUploader.Receiver;

(0, _enzyme.configure)({ adapter: new _enzymeAdapterReact2.default() });

var testFile = {
  lastModified: 1465229147840,
  lastModifiedDate: 'Tue Jun 07 2016 00:05:47 GMT+0800 (HKT)',
  name: 'test.jpg',
  size: 1024,
  type: 'image/jpg',
  webkitRelativePath: ''
};

var testFileCopy = JSON.parse(JSON.stringify(testFile));

var files = [testFile];

var createEvent = function createEvent(eventName) {
  var event = document.createEvent('HTMLEvents');
  event.initEvent(eventName, false, true);
  event.preventDefault = jest.genMockFn();
  event.dataTransfer = {
    files: files,
    setData: jest.genMockFunction(),
    types: ['Files']
  };

  return event;
};

describe('Receiver', function () {
  var dragEnterEvent = void 0,
      dragOverEvent = void 0,
      dragLeaveEvent = void 0,
      dropEvent = void 0,
      stringClass = 'receiver',
      arrayClass = ['react', 'receiver'],
      customStyle = { display: 'block' };

  beforeEach(function () {
    global.document = (0, _jsdom.jsdom)();
    global.window = document.parentWindow;
    global.window.DragEvent = 'DragEvent';
    global.window.DataTransfer = 'DataTransfer';

    dragEnterEvent = createEvent('dragenter');
    dragOverEvent = createEvent('dragover');
    dragLeaveEvent = createEvent('dragleave');
    dropEvent = createEvent('drop');
  });

  describe('constructor()', function () {
    var emptyFn = function emptyFn() {},
        component = _react2.default.createElement(Receiver, {
      onDragEnter: emptyFn,
      onDragOver: emptyFn,
      onDragLeave: emptyFn,
      onFileDrop: emptyFn
    });

    beforeEach(function () {
      console.warn = jest.genMockFn();
    });

    afterEach(function () {
      console.warn.mockClear();
    });

    it('should throw an error if DnD or File API is not supported', function () {
      global.window.DragEvent = undefined;
      global.window.DataTransfer = undefined;

      expect(function () {
        return (0, _enzyme.shallow)(component);
      }).toThrow('Browser does not support DnD events or File API.');
    });

    it('should assign window to this.wrapper if no wrapperId is provided', function () {
      var receiver = (0, _enzyme.shallow)(component);
      expect(receiver.instance().wrapper).toEqual(global.window);
    });

    it('should throw an error if wrapperId is given but element is not found', function () {
      expect(function () {
        return (0, _enzyme.shallow)(_react2.default.createElement(Receiver, {
          wrapperId: 'random',
          onDragEnter: emptyFn,
          onDragOver: emptyFn,
          onDragLeave: emptyFn,
          onFileDrop: emptyFn
        }));
      }).toThrow();
    });

    it('should not throw an error if wrapperId is given and the element exists', function () {
      expect(function () {
        return (0, _enzyme.mount)(_react2.default.createElement(
          'div',
          { id: 'wrapper' },
          _react2.default.createElement(Receiver, {
            wrapperId: 'wrapper',
            onDragEnter: emptyFn,
            onDragOver: emptyFn,
            onDragLeave: emptyFn,
            onFileDrop: emptyFn
          })
        ), { attachTo: document.body });
      }).not.toThrow();
    });

    it('should console.warn when a new wrapperId is given', function () {
      var receiver = (0, _enzyme.shallow)(component);
      receiver.setProps({ wrapperId: 'newRandom' });
      expect(console.warn.mock.calls.length).toBe(1);
    });
  });

  describe('state of dragLevel', function () {
    var receiver = void 0,
        onDragEnter = void 0,
        onDragOver = void 0,
        onDragLeave = void 0,
        onFileDrop = void 0;

    beforeEach(function () {
      var mockOnDragEnter = jest.genMockFn();
      var mockOnDragOver = jest.genMockFn();
      var mockOnDragLeave = jest.genMockFn();
      var mockOnFileDrop = jest.genMockFn();

      onDragEnter = mockOnDragEnter;
      onDragOver = mockOnDragOver;
      onDragLeave = mockOnDragLeave;
      onFileDrop = mockOnFileDrop;

      var component = _react2.default.createElement(Receiver, {
        isOpen: false,
        files: [],
        onDragEnter: onDragEnter,
        onDragOver: onDragOver,
        onDragLeave: onDragLeave,
        onFileDrop: onFileDrop
      });

      receiver = (0, _enzyme.shallow)(component);
    });

    it('should increase state of dragLevel by 1 with dragEnter event', function () {
      var oldDragLevel = receiver.state().dragLevel;
      window.dispatchEvent(dragEnterEvent);
      var newDragLevel = receiver.state().dragLevel;
      expect(newDragLevel).toEqual(oldDragLevel + 1);
    });

    it('should call onDragEnter with dragEnter event if isOpen is false', function () {
      window.dispatchEvent(dragEnterEvent);
      expect(onDragEnter).toBeCalled();
    });

    it('should not call onDragEnter with dragEnter event if isOpen is true', function () {
      receiver.setProps({ isOpen: true });
      window.dispatchEvent(dragEnterEvent);
      expect(onDragEnter).not.toBeCalled();
    });

    it('should not call onDragEnter callback with dragEnter event if dataTransfer.types does not include `Files`', function () {
      onDragEnter = jest.genMockFn();
      dragEnterEvent.dataTransfer.types = ['HTMLElement'];

      receiver.setProps({ onDragEnter: onDragEnter });

      window.dispatchEvent(dragEnterEvent);
      expect(onDragEnter).not.toBeCalled();
    });

    it('should call event.preventDefault with dragOver event', function () {
      window.dispatchEvent(dragOverEvent);
      expect(dragOverEvent.preventDefault).toBeCalled();
    });

    it('should call onDragOver with dragOver event', function () {
      window.dispatchEvent(dragOverEvent);
      expect(onDragOver).toBeCalled();
    });

    it('should decrease state of dragLevel by 1 with dragLeave event', function () {
      var oldDragLevel = receiver.state().dragLevel;
      window.dispatchEvent(dragEnterEvent);
      var newDragLevel = receiver.state().dragLevel;
      expect(newDragLevel).toEqual(oldDragLevel + 1);

      window.dispatchEvent(dragLeaveEvent);
      var finalDragLevel = receiver.state().dragLevel;
      expect(finalDragLevel).toEqual(newDragLevel - 1);
      expect(onDragLeave).toBeCalled();
    });

    it('should call onDragLeave if state of dragLevel is not 0', function () {
      var oldDragLevel = receiver.state().dragLevel;
      window.dispatchEvent(dragEnterEvent);
      var newDragLevel = receiver.state().dragLevel;
      expect(newDragLevel).toEqual(oldDragLevel + 1);

      window.dispatchEvent(dragEnterEvent);
      var newerDragLevel = receiver.state().dragLevel;
      expect(newerDragLevel).toEqual(newDragLevel + 1);

      window.dispatchEvent(dragLeaveEvent);
      var finalDragLevel = receiver.state().dragLevel;
      expect(finalDragLevel).toEqual(newerDragLevel - 1);
      expect(onDragLeave).not.toBeCalled();

      window.dispatchEvent(dragLeaveEvent);
      var endDragLevel = receiver.state().dragLevel;
      expect(endDragLevel).toEqual(finalDragLevel - 1);
      expect(onDragLeave).toBeCalled();
    });

    it('should call event.preventDefault with drop event', function () {
      window.dispatchEvent(dropEvent);
      // eslint-disable-next-line no-undef
      expect(dropEvent.preventDefault).toBeCalled();
    });

    it('should call onFileDrop with drop event', function () {
      window.dispatchEvent(dropEvent);
      expect(onFileDrop).toBeCalled();
    });

    it('should set state of dragLevel to 0 with dragEnter event', function () {
      var oldDragLevel = receiver.state().dragLevel;
      window.dispatchEvent(dragEnterEvent);
      var newDragLevel = receiver.state().dragLevel;
      expect(newDragLevel).toEqual(oldDragLevel + 1);

      window.dispatchEvent(dropEvent);
      var finalDragLevel = receiver.state().dragLevel;
      expect(finalDragLevel).toEqual(0);
    });

    it('should not call any callback after Receiver did unmount', function () {
      receiver.unmount();
      window.dispatchEvent(dragEnterEvent);
      expect(onDragEnter).not.toBeCalled();

      window.dispatchEvent(dragOverEvent);
      expect(onDragOver).not.toBeCalled();

      window.dispatchEvent(dragLeaveEvent);
      expect(onDragLeave).not.toBeCalled();

      window.dispatchEvent(dropEvent);
      expect(onFileDrop).not.toBeCalled();
    });
  });

  describe('callbacks and callback arguments', function () {
    var fileId = 'Ghb19rg1',
        onDragEnter = void 0,
        onDragOver = void 0,
        onDragLeave = void 0,
        onFileDrop = void 0;

    beforeEach(function () {
      _shortid2.default.generate = jest.genMockFn().mockReturnValue(fileId);

      var mockOnDragEnter = function mockOnDragEnter(e) {
        expect(e.type).toBe('dragenter');
      };
      var mockOnDragOver = function mockOnDragOver(e) {
        expect(e.type).toBe('dragover');
      };
      var mockOnDragLeave = function mockOnDragLeave(e) {
        expect(e.type).toBe('dragleave');
      };
      var mockOnFileDrop = function mockOnFileDrop(e, _files) {
        expect(e.type).toBe('drop');
        expect(_shortid2.default.generate).toBeCalled();
        var file = _files[0];
        expect(file.id).toBe(fileId);
        expect(file.status).toBe(uploadStatus.PENDING);
        expect(file.progress).toBe(0);
        expect(file.src).toBe(null);
        expect(file.data).toEqual(testFile);
        // to test data mutation
        expect(testFile).toEqual(testFileCopy);
      };

      onDragEnter = mockOnDragEnter;
      onDragOver = mockOnDragOver;
      onDragLeave = mockOnDragLeave;
      onFileDrop = mockOnFileDrop;

      var component = _react2.default.createElement(Receiver, {
        isOpen: false,
        files: [],
        onDragEnter: onDragEnter,
        onDragOver: onDragOver,
        onDragLeave: onDragLeave,
        onFileDrop: onFileDrop
      });

      (0, _enzyme.shallow)(component);
    });

    afterEach(function () {
      _shortid2.default.generate.mockClear();
    });

    it('should execute the onDragEnter callback with a DragEvent with type `dragenter` as argument', function () {
      window.dispatchEvent(dragEnterEvent);
    });

    it('should execute the onDragOver callback with a DragEvent with type `dragover` as argument', function () {
      window.dispatchEvent(dragOverEvent);
    });

    it('should execute the onDragLeave callback with a DragEvent with type `dragleave` as argument', function () {
      window.dispatchEvent(dragLeaveEvent);
    });

    it('should execute the onFileDrop callback with a DragEvent with type `drop` as argument and it should not mutate the dataTransfer.files', function () {
      window.dispatchEvent(dropEvent);
    });
  });

  describe('render()', function () {
    var receiver = void 0,
        childrenItems = Array(5).fill().map(function (value, index) {
      return _react2.default.createElement(
        'li',
        { key: index },
        index
      );
    });

    beforeEach(function () {
      var mockOnDragEnter = jest.genMockFn();
      var mockOnDragOver = jest.genMockFn();
      var mockOnDragLeave = jest.genMockFn();
      var mockOnFileDrop = jest.genMockFn();

      var component = _react2.default.createElement(
        Receiver,
        {
          isOpen: false,
          files: [],
          style: customStyle,
          onDragEnter: mockOnDragEnter,
          onDragOver: mockOnDragOver,
          onDragLeave: mockOnDragLeave,
          onFileDrop: mockOnFileDrop
        },
        childrenItems
      );

      receiver = (0, _enzyme.shallow)(component);
    });

    it('should render nothing if isOpen is false', function () {
      expect(receiver.type()).toEqual(null);
      expect(receiver.children().exists()).toBe(false);
    });

    it('should render a div wrapper with children if isOpen is true', function () {
      receiver.setProps({ isOpen: true });
      expect(receiver.type()).toEqual('div');
      expect(receiver.children().length).toEqual(childrenItems.length);
    });

    it('should render a div wrapper with customClass in string', function () {
      receiver.setProps({ isOpen: true, customClass: stringClass });
      expect(receiver.hasClass(stringClass)).toBe(true);
    });

    it('should render a div wrapper with customClass in array', function () {
      receiver.setProps({ isOpen: true, customClass: arrayClass });
      arrayClass.forEach(function (classname) {
        expect(receiver.hasClass(classname)).toBe(true);
      });
    });

    it('should render a div wrapper with applying `props.style`', function () {
      receiver.setProps({ isOpen: true, style: customStyle });
      expect(receiver.prop('style')).toEqual(customStyle);
    });
  });
});
/* eslint-enable no-undef, max-len, no-console */