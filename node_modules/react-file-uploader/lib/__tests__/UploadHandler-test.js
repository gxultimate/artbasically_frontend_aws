'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _enzymeAdapterReact = require('enzyme-adapter-react-16');

var _enzymeAdapterReact2 = _interopRequireDefault(_enzymeAdapterReact);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-undef, max-len, no-console */
jest.dontMock('../UploadHandler');
jest.dontMock('../index');
jest.dontMock('classnames');

var FileUploader = require('../index');
var uploadStatus = FileUploader.status;
var UploadHandler = FileUploader.UploadHandler;

(0, _enzyme.configure)({ adapter: new _enzymeAdapterReact2.default() });

describe('UploadHandler', function () {
  var uploadHandler = void 0,
      component = void 0,
      mockAbort = void 0,
      mockUpload = void 0,
      stringClass = 'receiver',
      arrayClass = ['react', 'receiver'],
      customStyle = { display: 'block' },
      children = _react2.default.createElement(
    'span',
    null,
    'children'
  ),
      renderFunction = jest.genMockFn(),
      file = { id: 'fileId', status: uploadStatus.PENDING };

  beforeEach(function () {
    mockAbort = jest.genMockFn();
    mockUpload = jest.genMockFn();
    renderFunction.mockReturnValue(children);

    component = _react2.default.createElement(UploadHandler, {
      customClass: stringClass,
      style: customStyle,
      file: file,
      abort: mockAbort,
      upload: mockUpload
    });

    uploadHandler = (0, _enzyme.shallow)(component);
  });

  describe('componentDidMount()', function () {
    it('should throw an error if `props.upload` is not a function', function () {
      expect(function () {
        return (0, _enzyme.shallow)(_react2.default.createElement(UploadHandler, {
          file: file,
          abort: mockAbort
        }));
      }).toThrow('`props.upload` must be a function');
    });

    it('should throw an error if `props.file` is missing', function () {
      expect(function () {
        return (0, _enzyme.shallow)(_react2.default.createElement(UploadHandler, {
          abort: mockAbort,
          upload: mockUpload
        }));
      }).toThrow('`props.file` must be provided');
    });

    it('should call `props.upload()` if `props.autoStart` is true', function () {
      uploadHandler = (0, _enzyme.shallow)(_react2.default.createElement(UploadHandler, {
        file: file,
        upload: mockUpload,
        autoStart: true
      }));

      expect(mockUpload).toBeCalledWith(file);
    });
  });

  describe('render()', function () {
    it('should render a HTML `props.component` element as wrapper', function () {
      expect(uploadHandler.type()).toEqual('li');
      uploadHandler.setProps({ component: 'div' });
      expect(uploadHandler.type()).toEqual('div');
      expect(uploadHandler.children().exists()).toBe(false);
    });

    it('should render ReactElement children if it is given', function () {
      uploadHandler.setProps({ children: children });
      expect(uploadHandler.children().matchesElement(children));
    });

    it('should accept children as render function with { abort, upload } and the instance itself', function () {
      uploadHandler.setProps({ children: renderFunction });
      expect(renderFunction).toBeCalledWith({ abort: mockAbort, upload: mockUpload }, uploadHandler.instance());
      expect(uploadHandler.children().matchesElement(children));
    });

    it('should render a div wrapper with customClass in string', function () {
      uploadHandler.setProps({ customClass: stringClass });
      expect(uploadHandler.hasClass(stringClass)).toBe(true);
    });

    it('should render a div wrapper with customClass in array', function () {
      uploadHandler.setProps({ customClass: arrayClass });
      arrayClass.forEach(function (classname) {
        expect(uploadHandler.hasClass(classname)).toBe(true);
      });
    });

    it('should render a div wrapper with applying `props.style`', function () {
      uploadHandler.setProps({ style: customStyle });
      expect(uploadHandler.prop('style')).toEqual(customStyle);
    });
  });
});
/* eslint-enable no-undef, max-len, no-console */